#!/bin/bash

# Velo Version Generation Script
# Generates Sources/VeloCore/GeneratedVersion.swift with build-time version information

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Detect script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
VERSION_FILE="$PROJECT_ROOT/Sources/VeloCore/GeneratedVersion.swift"

log_info "Generating version information for Velo..."

# Change to project root to ensure Git commands work correctly
cd "$PROJECT_ROOT"

# Function to get Git information with error handling
get_git_info() {
    local git_command=("$@")
    
    if ! command -v git >/dev/null 2>&1; then
        log_warn "Git not found in PATH"
        return 1
    fi
    
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log_warn "Not in a Git repository"
        return 1
    fi
    
    # Run git command (without timeout for compatibility)
    if git "${git_command[@]}" 2>/dev/null; then
        return 0
    else
        log_warn "Git command failed: git ${git_command[*]}"
        return 1
    fi
}

# Collect version information
VERSION=""
GIT_TAG=""
GIT_COMMIT=""
GIT_COMMIT_FULL=""
IS_DIRTY="false"
IS_ON_TAG="false"
BUILD_DATE=""

# Get build date (ISO 8601 format)
BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Try to get Git information
if get_git_info rev-parse HEAD >/dev/null; then
    # Get commit hash (short and full)
    GIT_COMMIT=$(get_git_info rev-parse --short HEAD || echo "unknown")
    GIT_COMMIT_FULL=$(get_git_info rev-parse HEAD || echo "unknown")
    
    # Check if working directory is clean
    if [[ -n $(get_git_info status --porcelain || echo "") ]]; then
        IS_DIRTY="true"
    fi
    
    # Check if we're exactly on a tag
    if get_git_info describe --exact-match --tags HEAD >/dev/null; then
        IS_ON_TAG="true"
        GIT_TAG=$(get_git_info describe --exact-match --tags HEAD || echo "")
    else
        # Get the last tag (if any)
        GIT_TAG=$(get_git_info describe --tags --abbrev=0 || echo "")
    fi
    
    # Generate version string
    if [[ "$IS_ON_TAG" == "true" && -n "$GIT_TAG" ]]; then
        # We're on a tag - use clean tag version
        VERSION="${GIT_TAG#v}"  # Remove 'v' prefix if present
    elif [[ -n "$GIT_TAG" ]]; then
        # We have a tag but we're not on it - create dev version
        BASE_VERSION="${GIT_TAG#v}"  # Remove 'v' prefix if present
        VERSION="$BASE_VERSION-dev+$GIT_COMMIT"
        if [[ "$IS_DIRTY" == "true" ]]; then
            VERSION="$VERSION-dirty"
        fi
    else
        # No tags found - use base version
        VERSION="0.0.1-dev+$GIT_COMMIT"
        if [[ "$IS_DIRTY" == "true" ]]; then
            VERSION="$VERSION-dirty"
        fi
    fi
    
    log_info "Git information collected:"
    log_info "  Tag: ${GIT_TAG:-"(none)"}"
    log_info "  Commit: $GIT_COMMIT"
    log_info "  On tag: $IS_ON_TAG"
    log_info "  Dirty: $IS_DIRTY"
else
    # Fallback when Git is not available
    log_warn "Git information unavailable, using fallback version"
    VERSION="0.0.1-nogit+$(date +%s)"
    GIT_COMMIT="unknown"
    GIT_COMMIT_FULL="unknown"
    GIT_TAG=""
fi

log_info "Generated version: $VERSION"

# Ensure the directory exists
mkdir -p "$(dirname "$VERSION_FILE")"

# Generate the Swift file
cat > "$VERSION_FILE" << EOF
// This file is automatically generated by Scripts/generate-version.sh
// DO NOT EDIT MANUALLY - it will be overwritten on every build

import Foundation

/// Build-time generated version information
/// This file is created during compilation and contains version info from Git
public struct GeneratedVersion {
    
    /// The version string (SemVer compliant)
    public static let version = "$VERSION"
    
    /// Build timestamp (ISO 8601 UTC)
    public static let buildDate = "$BUILD_DATE"
    
    /// Git commit hash (short)
    public static let gitCommit = "$GIT_COMMIT"
    
    /// Git commit hash (full)
    public static let gitCommitFull = "$GIT_COMMIT_FULL"
    
    /// Git tag (if any)
    public static let gitTag = "$GIT_TAG"
    
    /// Whether the working directory was dirty at build time
    public static let isDirty = $IS_DIRTY
    
    /// Whether the build was made exactly on a Git tag
    public static let isOnTag = $IS_ON_TAG
    
    /// Build information summary
    public static let buildInfo: String = {
        var info = "Built on \(buildDate)"
        if !gitCommit.isEmpty && gitCommit != "unknown" {
            info += " from commit \(gitCommit)"
        }
        if !gitTag.isEmpty {
            info += " (tag: \(gitTag))"
        }
        if isDirty {
            info += " with uncommitted changes"
        }
        return info
    }()
}
EOF

log_info "Generated version file: $VERSION_FILE"
log_info "Version: $VERSION"
log_info "Build date: $BUILD_DATE"

# Validate the generated Swift file
if command -v swift >/dev/null 2>&1; then
    if swift -frontend -parse "$VERSION_FILE" >/dev/null 2>&1; then
        log_info "Generated Swift file syntax is valid"
    else
        log_error "Generated Swift file has syntax errors!"
        exit 1
    fi
fi

log_info "Version generation completed successfully"