name: Pre-Release Testing

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - stress
      install_real_packages:
        description: 'Install real packages for testing'
        required: false
        default: false
        type: boolean
      performance_baseline:
        description: 'Run performance baseline tests'
        required: false
        default: false
        type: boolean

jobs:
  matrix-test:
    runs-on: macos-14 # Apple Silicon only
    name: Test (Apple Silicon)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: System Information
      run: |
        echo "=== System Information ==="
        uname -a
        sysctl hw.model
        sysctl machdep.cpu.brand_string 2>/dev/null || echo "CPU info not available"
        sw_vers
        echo "=== Architecture ==="
        arch
        file /usr/bin/swift || echo "Swift binary info not available"
        echo "=== Disk Space ==="
        df -h
        echo "=== Memory ==="
        vm_stat | head -20
    
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/.velo/taps
        key: ${{ runner.os }}-arm64-swift-5.9-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-arm64-swift-5.9-
          ${{ runner.os }}-arm64-
    
    - name: Build All Configurations
      run: |
        echo "=== Building Debug ==="
        ./Scripts/build.sh
        echo "=== Building Release ==="
        ./Scripts/build.sh --release
        echo "=== Binary Info ==="
        file .build/release/velo
        .build/release/velo --version || echo "Binary not ready"
    
    - name: Quick Tests
      if: github.event.inputs.test_scope == 'quick' || github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == 'stress'
      run: |
        echo "=== Running Quick Tests ==="
        if ! swift test --filter VeloCoreTests --parallel; then
          echo "❌ VeloCoreTests failed"
          exit 1
        fi
        echo "✅ VeloCoreTests passed"
        
        if ! swift test --filter VeloFormulaTests --parallel; then
          echo "❌ VeloFormulaTests failed"
          exit 1
        fi
        echo "✅ VeloFormulaTests passed"
    
    - name: Full Test Suite
      if: github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == 'stress'
      run: |
        echo "=== Running Full Test Suite ==="
        if ! swift test --enable-code-coverage --parallel; then
          echo "❌ Full test suite failed"
          exit 1
        fi
        echo "✅ Full test suite passed"
    
    - name: Stress Tests
      if: github.event.inputs.test_scope == 'stress'
      run: |
        # Run tests multiple times to catch race conditions
        for i in {1..3}; do
          echo "=== Stress Test Run $i ==="
          swift test --filter RealCLITests --parallel
        done
    
    - name: Real Package Installation Tests
      if: github.event.inputs.install_real_packages == 'true'
      run: |
        # Setup velo
        export PATH="$PWD/.build/release:$PATH"
        mkdir -p ~/.velo/{bin,Cellar,cache,taps,logs,tmp}
        
        echo "=== Testing Real Package Operations ==="
        
        # Test search functionality
        velo search wget | head -5
        velo search curl | head -5
        
        # Test info for real packages
        velo info wget || echo "Info test completed"
        velo info curl || echo "Info test completed"
        velo info git || echo "Package@version info test"
        
        # Test doctor
        velo doctor
        
        echo "=== Real Package Tests Completed ==="

  performance-benchmarks:
    runs-on: macos-14 # Use Apple Silicon for consistent performance
    name: Performance Benchmarks
    if: github.event.inputs.performance_baseline == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Build Release
      run: ./Scripts/build.sh --release
    
    - name: Performance Baseline Tests
      run: |
        echo "=== Performance Baseline Testing ==="
        
        # Setup
        export PATH="$PWD/.build/release:$PATH"
        mkdir -p ~/.velo/{bin,Cellar,cache,taps,logs,tmp}
        
        # Formula parsing performance
        echo "Testing formula parsing performance..."
        time velo info wget >/dev/null 2>&1 || echo "Formula parsing test"
        
        # Search index build performance
        echo "Testing search index build performance..."
        time velo search "test" >/dev/null 2>&1 || echo "Search index test"
        
        # Large search performance
        echo "Testing large search performance..."
        time velo search "lib" --descriptions >/dev/null 2>&1 || echo "Large search test"
        
        # Memory usage test
        echo "Testing memory usage..."
        /usr/bin/time -l velo search ".*" --descriptions >/dev/null 2>&1 || echo "Memory usage test"
    
    - name: Run Performance Tests
      run: |
        swift test --filter PerformanceBenchmarks
    
    - name: Performance Report
      run: |
        echo "=== Performance Report ==="
        echo "Performance tests completed. Check logs above for timing information."
        echo "Key metrics to monitor:"
        echo "- Formula parsing: Should be < 100ms"
        echo "- Search index build: Should be < 10s"
        echo "- Large searches: Should be < 5s"
        echo "- Memory usage: Should be < 200MB for normal operations"

  integration-testing:
    runs-on: macos-14
    name: Comprehensive Integration Testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Build and Setup
      run: |
        ./Scripts/build.sh --release
        export PATH="$PWD/.build/release:$PATH"
        mkdir -p ~/.velo/{bin,Cellar,cache,taps,logs,tmp}
        ln -sf $PWD/.build/release/velo ~/.velo/bin/velo
        echo "$HOME/.velo/bin" >> $GITHUB_PATH
    
    - name: CLI Integration Tests
      run: |
        echo "=== CLI Integration Testing ==="
        
        # Basic command tests
        velo --help
        velo --version
        
        # Doctor tests
        echo "Testing doctor command..."
        velo doctor
        velo doctor --verbose
        
        # Search tests  
        echo "Testing search commands..."
        velo search wget
        velo search --descriptions compression
        velo search node | head -10
        
        # Info tests
        echo "Testing info commands..."
        velo info wget
        velo info wget@1.25.0
        velo info --verbose curl
        velo info --installed wget || echo "Not installed (expected)"
        
        # List tests
        echo "Testing list commands..."
        velo list
        velo list --versions
        
        # Error handling tests
        echo "Testing error handling..."
        velo info definitely-does-not-exist && exit 1 || echo "✓ Handles missing packages"
        velo search "" || echo "✓ Handles empty search"
    
    - name: Project Context Tests
      run: |
        echo "=== Project Context Testing ==="
        
        # Create test project
        mkdir test-project
        cd test-project
        
        echo '{"dependencies": {"wget": "1.25.0", "curl": "latest"}, "taps": ["homebrew/core"]}' > velo.json
        
        # Test project detection
        velo doctor | grep -E "(project context|velo\.json)" || echo "Project context test"
        velo list
        
        cd ..
    
    - name: Concurrent Operations Test
      run: |
        echo "=== Concurrent Operations Testing ==="
        
        # Run multiple operations in parallel
        velo search wget &
        velo search curl &
        velo search python &
        velo info node &
        wait
        
        echo "All concurrent operations completed"
    
    - name: Run Full Integration Test Suite
      run: |
        swift test --filter RealCLITests

  release-readiness:
    runs-on: macos-14
    name: Release Readiness Check
    needs: [matrix-test, integration-testing]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift  
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Build Release Artifacts
      run: |
        # Build for Apple Silicon
        ./Scripts/build.sh --release --arch arm64
        
        # Create distribution
        mkdir -p dist
        cp .build/release/velo dist/velo-arm64
        strip dist/velo-arm64
        
        # Verify binary
        file dist/velo-arm64
        dist/velo-arm64 --version
        
        # Test basic functionality
        dist/velo-arm64 --help >/dev/null
        
        # Package
        tar -czf dist/velo-macos-arm64.tar.gz -C dist velo-arm64
        
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: velo-pre-release-${{ github.run_number }}
        path: |
          dist/velo-macos-arm64.tar.gz
        retention-days: 7
    
    - name: Release Readiness Summary
      run: |
        echo "=== Release Readiness Summary ==="
        echo "✅ Apple Silicon testing completed"
        echo "✅ Integration tests passed"
        echo "✅ Release binary built and tested"
        echo "✅ Artifacts uploaded"
        echo ""
        echo "🚀 Ready for release!"
        echo ""
        echo "Download artifacts from this workflow run to test manually."