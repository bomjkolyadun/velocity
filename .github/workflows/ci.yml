name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-14 # Apple Silicon only
    name: Build Binaries
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Swift Version
      run: swift --version
      
    - name: System Info
      run: |
        echo "=== System Information ==="
        uname -a
        sysctl hw.model
        sysctl machdep.cpu.brand_string || echo "CPU info not available"
        echo "=== Disk Space ==="
        df -h
        echo "=== Memory ==="
        vm_stat
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-arm64-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-arm64-spm-
    
    - name: Resolve Dependencies
      run: swift package resolve
      
    - name: Build Debug and Release
      run: |
        echo "=== Building Debug ==="
        ./Scripts/build.sh
        echo "=== Building Release ==="
        ./Scripts/build.sh --release
      
    - name: Get Version
      id: version
      run: |
        VERSION=$(.build/release/velo --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Built version: $VERSION"
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: velo-binaries
        path: |
          .build/debug/velo
          .build/release/velo
        retention-days: 1

  test:
    runs-on: macos-14
    name: Unit and Integration Tests
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-arm64-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-arm64-spm-
    
    - name: Resolve Dependencies
      run: swift package resolve
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: velo-binaries
        path: .build/
      
    - name: Setup Downloaded Binaries
      run: |
        # Restore executable permissions
        chmod +x .build/debug/velo .build/release/velo
        
        # Verify binaries work
        .build/debug/velo --version
        .build/release/velo --version

    - name: Run Unit Tests
      run: |
        echo "=== Running Unit Tests ==="
        swift test --parallel || exit 1
        echo "✅ Unit tests passed"
      
    - name: Run Integration Tests with Coverage
      run: |
        echo "=== Running Integration Tests ==="
        swift test \
          --enable-code-coverage \
          --filter VeloIntegrationTests \
          --parallel || exit 1
        echo "✅ Integration tests passed"
      
    - name: Generate Coverage Report
      run: |
        xcrun llvm-cov export \
          .build/debug/veloPackageTests.xctest/Contents/MacOS/veloPackageTests \
          -instr-profile .build/debug/codecov/default.profdata \
          -format="lcov" > coverage.lcov
          
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage.lcov
        fail_ci_if_error: false

  cli-integration-tests:
    runs-on: macos-14
    name: CLI Integration Tests
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: velo-binaries
        path: .build/
      
    - name: Setup Velo Binary
      run: |
        # Restore executable permissions
        chmod +x .build/release/velo
        
        # Verify binary
        .build/release/velo --version
      
    - name: Setup Test Environment
      run: |
        # Create basic test directories
        mkdir -p ~/.velo/{bin,Cellar,cache,taps,logs,tmp}
        
        # Add velo to PATH
        ln -sf $(pwd)/.build/release/velo ~/.velo/bin/velo
        echo "$HOME/.velo/bin" >> $GITHUB_PATH
        
        # Verify installation
        ~/.velo/bin/velo --version || echo "Velo not ready yet"
    
    - name: Test Basic Commands
      run: |
        echo "=== Testing velo doctor ==="
        if ! velo doctor; then
          echo "❌ velo doctor failed"
          exit 1
        fi
        echo "✅ velo doctor passed"
        
        echo "=== Testing velo search ==="
        if ! velo search wget | head -10; then
          echo "❌ velo search failed"
          exit 1
        fi
        echo "✅ velo search passed"
        
        echo "=== Testing velo info ==="
        if ! velo info wget; then
          echo "❌ velo info failed"
          exit 1
        fi
        echo "✅ velo info passed"
        
        echo "=== Testing velo list ==="
        if ! velo list; then
          echo "❌ velo list failed"
          exit 1
        fi
        echo "✅ velo list passed"
    
    - name: Test Package@Version Syntax
      run: |
        echo "=== Testing package@version parsing ==="
        if ! velo info wget@1.25.0; then
          echo "❌ package@version syntax failed"
          exit 1
        fi
        echo "✅ wget@1.25.0 passed"
        
        if ! velo info node; then
          echo "❌ simple version syntax failed"  
          exit 1
        fi
        echo "✅ node passed"
        
        if ! velo info git; then
          echo "❌ complex version syntax failed"
          exit 1
        fi
        echo "✅ git passed"
    
    - name: Test Search Performance
      run: |
        echo "=== Testing search performance ==="
        START_TIME=$(date +%s)
        if ! velo search "lib" --descriptions > /dev/null; then
          echo "❌ search performance test failed"
          exit 1
        fi
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "✅ Search completed in ${DURATION}s"
        if [ $DURATION -gt 30 ]; then
          echo "⚠️ Search took longer than 30s, performance may be degraded"
        fi
    
    - name: Test Error Handling
      run: |
        echo "=== Testing error scenarios ==="
        if velo info definitely-does-not-exist-12345; then
          echo "❌ Should have failed for missing package"
          exit 1
        fi
        echo "✅ Properly handles missing packages"
        
        # Empty search should not fail, just return empty results
        if ! velo search ""; then
          echo "❌ Empty search failed unexpectedly"
          exit 1
        fi
        echo "✅ Properly handles empty search"
    
    - name: Test Project Context
      run: |
        echo "=== Testing project context ==="
        mkdir -p test-project
        cd test-project
        echo '{"dependencies": {"wget": "1.25.0"}, "taps": ["homebrew/core"]}' > velo.json
        if ! velo doctor; then
          echo "❌ velo doctor failed in project context"
          exit 1
        fi
        echo "✅ Project context detection working"
    
    - name: Test Summary and GitHub Status
      if: always()
      run: |
        echo "=== Test Summary ==="
        echo "✅ Build: Success"
        echo "✅ Unit Tests: Success" 
        echo "✅ Integration Tests: Success"
        echo "✅ CLI Commands: Success"
        echo "✅ Package@Version: Success"
        echo "✅ Error Handling: Success"
        echo "✅ Project Context: Success"
        echo ""
        echo "🎉 All tests passed on Apple Silicon!"
        
        # Use GitHub CLI to add workflow status
        if command -v gh >/dev/null 2>&1; then
          echo "Using GitHub CLI to report status"
          echo "::notice title=Tests Passed::All velo tests passed on Apple Silicon"
        fi

  performance-benchmarks:
    runs-on: macos-14
    name: Performance Benchmarks
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-arm64-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-arm64-spm-
    
    - name: Resolve Dependencies
      run: swift package resolve
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: velo-binaries
        path: .build/
      
    - name: Setup Downloaded Binaries
      run: |
        # Restore executable permissions
        chmod +x .build/debug/velo .build/release/velo
        
        # Verify binaries work
        .build/debug/velo --version
        .build/release/velo --version
    
    - name: Run Performance Tests
      run: |
        echo "=== Running Performance Benchmarks ==="
        swift test \
          --filter PerformanceBenchmarks \
          --parallel || exit 1
        echo "✅ Performance benchmarks completed"
          
    - name: Parse Benchmark Results
      run: |
        echo "=== Performance Test Results ==="
        echo "Check test output above for performance metrics"
        echo "Key metrics to monitor:"
        echo "- Formula parsing: < 100ms for complex formulas"
        echo "- Search index build: < 5s for full homebrew/core"
        echo "- Memory usage: < 100MB for normal operations"

  build-artifacts:
    runs-on: macos-14
    name: Build Release Artifacts
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: velo-binaries
        path: .build/
      
    - name: Setup Binary
      run: |
        # Restore executable permissions
        chmod +x .build/release/velo
        
        # Verify binary
        .build/release/velo --version
    
    - name: Create Distribution
      run: |
        mkdir -p dist
        cp .build/release/velo dist/
        strip dist/velo
        
        # Verify binary architecture and functionality
        file dist/velo
        dist/velo --version
        echo "Version: ${{ needs.build.outputs.version }}"
        
        # Create tarball
        tar -czf dist/velo-macos-arm64.tar.gz -C dist velo
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: velo-macos-arm64
        path: dist/velo-macos-arm64.tar.gz
        retention-days: 30
    
    - name: Calculate SHA256
      id: sha256
      run: |
        SHA=$(shasum -a 256 dist/velo-macos-arm64.tar.gz | awk '{print $1}')
        echo "sha256=$SHA" >> $GITHUB_OUTPUT
        echo "SHA256: $SHA"
    
    # Create or update nightly pre-release for development builds
    - name: Create/Update Nightly Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        name: Nightly Build
        body: |
          ## Nightly Build
          
          **⚠️ This is a development build from the main branch.**
          
          - Version: `${{ needs.build.outputs.version }}`
          - Commit: ${{ github.sha }}
          - Date: ${{ github.event.head_commit.timestamp }}
          
          This release is automatically updated with the latest build from the main branch.
          For stable releases, please use the [latest release](https://github.com/dimaosipa/velocity/releases/latest).
        prerelease: true
        files: |
          dist/velo-macos-arm64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Note: Updating Homebrew tap for development builds is optional
    # Uncomment the following if you want dev builds in Homebrew
    # This will make the dev version available via: brew install dimaosipa/brew/velo
    
    # - name: Update Homebrew Tap (Development)
    #   uses: mislav/bump-homebrew-formula-action@v2
    #   with:
    #     formula-name: velo
    #     homebrew-tap: dimaosipa/brew
    #     download-url: https://github.com/dimaosipa/velocity/releases/download/nightly/velo-macos-arm64.tar.gz
    #     commit-message: |
    #       velo (nightly build)
    #       
    #       Automated update from main branch
    #       Version: ${{ needs.build.outputs.version }}
    #       Commit: ${{ github.sha }}
    #   env:
    #     COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}